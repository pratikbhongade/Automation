import time
import win32com.client as win32
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, JavascriptException

# Initialize Edge WebDriver
driver = webdriver.Edge()  # This will use the Edge WebDriver in your PATH

validation_results = []

# Function to highlight an element
def highlight(element):
    driver.execute_script("arguments[0].setAttribute('style', arguments[1]);", element, "background: yellow; border: 2px solid red;")

# Function to check if a tab opens properly
def check_tab(tab_element, tab_name, content_locator):
    try:
        highlight(tab_element)
        time.sleep(1)  # Wait for 1 second before clicking the tab
        tab_element.click()
        WebDriverWait(driver, 3).until(
            EC.visibility_of_element_located(content_locator)
        )
        result = f"Main Tab '{tab_name}' opened successfully."
        print(result)
        validation_results.append(result)
        return True
    except TimeoutException:
        result = f"Failed to open Main Tab '{tab_name}'."
        print(result)
        validation_results.append(result)
        return False

# Function to check if a sub-tab opens properly by executing JavaScript
def check_sub_tab(sub_tab_js, sub_tab_name, content_locator):
    try:
        time.sleep(1)  # Wait for 1 second before clicking the sub-tab
        driver.execute_script(sub_tab_js)  # Execute JavaScript function directly
        WebDriverWait(driver, 3).until(
            EC.visibility_of_element_located(content_locator)
        )
        result = f"Sub Tab '{sub_tab_name}' opened successfully."
        print(result)
        validation_results.append(result)
        return True
    except TimeoutException:
        result = f"Failed to open Sub Tab '{sub_tab_name}'."
        print(result)
        validation_results.append(result)
        return False
    except JavascriptException as e:
        result = f"JavaScript error on Sub Tab '{sub_tab_name}': {e}"
        print(result)
        validation_results.append(result)
        return False

# Function to validate the first list element under the specified column and click the cancel button
def validate_first_list_element_and_cancel(column_index):
    try:
        # Wait for the table to be visible
        WebDriverWait(driver, 3).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "table.ListView"))
        )
        # Find the first element in the specified column
        first_element = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.XPATH, f"//table[@class='ListView']/tbody/tr[2]/td[{column_index}]/a"))
        )
        highlight(first_element)
        time.sleep(1)  # Wait for 1 second before clicking the first element
        first_element.click()
        # Validate that the element opens properly
        WebDriverWait(driver, 3).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "div#content"))  # Adjust the selector as needed
        )
        
        # Wait for 1 second before clicking the cancel button
        time.sleep(1)
        
        # Find and click the cancel button
        cancel_button = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.XPATH, "//img[@src='/fpa/images/btn_cancel.gif']"))
        )
        highlight(cancel_button)
        time.sleep(1)  # Wait for 1 second before clicking the cancel button
        cancel_button.click()
        
        return True
    except (TimeoutException, NoSuchElementException) as e:
        result = f"Failed to open the first list element or click the cancel button. Exception: {e}"
        print(result)
        validation_results.append(result)
        return False

# Function to handle the "Search" sub-tab in "Check Mgmt."
def handle_search_sub_tab():
    try:
        # Wait for the Search button to be clickable
        search_button = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.XPATH, "//img[@src='/fpa/images/btn_search_bluebrdr.jpg']"))
        )
        highlight(search_button)
        time.sleep(1)  # Wait for 1 second before clicking the Search button
        search_button.click()
        result = "Search button clicked successfully."
        print(result)
        validation_results.append(result)
        return True
    except (TimeoutException, NoSuchElementException) as e:
        result = f"Failed to click the Search button. Exception: {e}"
        print(result)
        validation_results.append(result)
        return False

# Navigate to the webpage containing the tabs
driver.get('https://itintranet1.keybank.com/fpa/Login')  # Replace with your actual URL

# Main tab elements and their corresponding content locators
main_tabs = {
    "Users": ("/fpa/Usr", (By.CSS_SELECTOR, "table.ListView")),
    "User Roles": ("/fpa/UsrRoles", (By.CSS_SELECTOR, "table.ListView")),
    "Accounts": ("/fpa/Acct", (By.CSS_SELECTOR, "table.ListView")),
    "GL/CC's": ("/fpa/GlCstCntr", (By.CSS_SELECTOR, "table.ListView")),
    "Printers": ("/fpa/Printer", (By.CSS_SELECTOR, "table.ListView")),
    "Misc. Lookups": ("/fpa/AdminMiscLookup", (By.CSS_SELECTOR, "table.ListView")),
    "Check Mgmt.": ("/fpa/CheckManagement", (By.CSS_SELECTOR, "table.ListView")),
    "Archive": ("/fpa/Archive", (By.CSS_SELECTOR, "table.ListView")),
}

# Sub-tabs for different main tabs and their corresponding content locators
sub_tabs_map = {
    "Users": {
        "Active": ("showList('Active', 'Usr');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Usr');", (By.ID, "content")),
        "All": ("showListNew('All', 'Usr');", (By.ID, "content")),
    },
    "User Roles": {
        "Active": ("showList('Active', 'UsrRoles');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'UsrRoles');", (By.ID, "content")),
        "All": ("showListNew('All', 'UsrRoles');", (By.ID, "content")),
    },
    "Accounts": {
        "Active": ("showList('Active', 'Acct');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Acct');", (By.ID, "content")),
        "All": ("showListNew('All', 'Acct');", (By.ID, "content")),
    },
    "GL/CC's": {
        "Active": ("showList('Active', 'GlCstCntr');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'GlCstCntr');", (By.ID, "content")),
        "All": ("showListNew('All', 'GlCstCntr');", (By.ID, "content")),
    },
    "Printers": {
        "Active": ("showList('Active', 'Printer');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Printer');", (By.ID, "content")),
        "All": ("showListNew('All', 'Printer');", (By.ID, "content")),
    },
    "Misc. Lookups": {
        "Active": ("showList('Active', 'AdminMiscLookup');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'AdminMiscLookup');", (By.ID, "content")),
        "All": ("showListNew('All', 'AdminMiscLookup');", (By.ID, "content")),
    },
    "Check Mgmt.": {
        "History": ("showList('History', 'CheckManagement');", (By.ID, "content")),
        "Search": ("showList('Search', 'CheckManagement');", (By.ID, "content")),
    },
}

# Map of specific columns to be clicked for each main tab
column_indices = {
    "Users": 2,  # 2nd column for Users
    "User Roles": 2,  # 2nd column for User Roles
    "Accounts": 2,  # 2nd column for Accounts
    "GL/CC's": 3,  # 3rd column for GL/CC's
    "Printers": 2,  # 2nd column for Printers
    "Misc. Lookups": 2,  # 2nd column for Misc. Lookups
    "Check Mgmt.": 4,  # 4th column for Check Mgmt.
}

all_tabs_opened = True

# Function to handle sub-tabs based on main tab
def handle_sub_tabs(tab_name, sub_tabs):
    global all_tabs_opened
    column_index = column_indices[tab_name]
    sub_tab_results = []
    for sub_tab_name, (sub_tab_js, sub_content_locator) in sub_tabs.items():
        if tab_name == "Check Mgmt." and sub_tab_name == "Search":
            sub_success = check_sub_tab(sub_tab_js, sub_tab_name, sub_content_locator)
            if sub_success:
                sub_success = handle_search_sub_tab()
        else:
            sub_success = check_sub_tab(sub_tab_js, sub_tab_name, sub_content_locator)
            if sub_success:
                first_list_element_success = validate_first_list_element_and_cancel(column_index)
                if not first_list_element_success:
                    all_tabs_opened = False

        if sub_success:
            result = f"Sub Tab '{sub_tab_name}' opened successfully."
            sub_tab_results.append(result)
        else:
            result = f"Failed to open Sub Tab '{sub_tab_name}'."
            sub_tab_results.append(result)
            all_tabs_opened = False
    
    return sub_tab_results

# Check main tabs and their respective sub-tabs
for tab_name, (tab_href, content_locator) in main_tabs.items():
    try:
        # Find the main tab element using its href attribute
        tab_element = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.XPATH, f"//a[@href='{tab_href}']"))
        )
        highlight(tab_element)
        time.sleep(1)  # Wait for 1 second before clicking the main tab
        success = check_tab(tab_element, tab_name, content_locator)
        if success:
            result = f"Main Tab '{tab_name}' opened successfully."
            print(result)
            validation_results.append(result)

            if tab_name in sub_tabs_map:
                sub_tab_results = handle_sub_tabs(tab_name, sub_tabs_map[tab_name])
                validation_results.extend(sub_tab_results)

        else:
            result = f"Failed to open Main Tab '{tab_name}'."
            print(result)
            validation_results.append(result)
            all_tabs_opened = False

    except (TimeoutException, NoSuchElementException) as e:
        result = f"Main Tab '{tab_name}' not found or not clickable. Exception: {e}"
        print(result)
        validation_results.append(result)
        all_tabs_opened = False

# Wait for 1 second before closing the browser
time.sleep(1)
# Close the browser
driver.quit()

# Print completion message if all tabs opened successfully
if all_tabs_opened:
    result = "Validation completed."
    print(result)
    validation_results.append(result)
else:
    result = "Validation failed."
    print(result)
    validation_results.append(result)

# Function to send email with validation results
def send_email(subject, validation_results):
    html_body = (
        "<html>"
        "<body style='font-family: Arial, sans-serif;'>"
        "<p>Hi Team,</p>"
        "<p>Please find the validation result of <strong>FPA IT Application</strong>:</p>"
        "<ol style='font-size: 14px; color: #333;'>"
    )
    
    for result in validation_results:
        if "Main Tab" in result:
            html_body += f"<li><strong>{result}</strong></li><ul>"
        elif "Sub Tab" in result:
            html_body += f"<li>{result}</li>"
        else:
            html_body += f"</ul><li style='color: red;'>{result}</li>"

    html_body += "</ul></ol>"
    html_body += (
        "<p style='font-size: 16px; color: green;'><strong>Validation Successful</strong></p>" if all_tabs_opened else
        "<p style='font-size: 16px; color: red;'><strong>Validation Failed</strong></p>"
    )
    html_body += (
        "<p>Best regards,</p>"
        "<p><strong>Your Name</strong><br>"
        "Your Position<br>"
        "Your Contact Information</p>"
        "</body>"
        "</html>"
    )
    
    outlook = win32.Dispatch('outlook.application')
    mail = outlook.CreateItem(0)
    mail.To = 'recipient@example.com'  # Replace with the recipient's email address
    mail.Subject = subject
    mail.HTMLBody = html_body
    mail.Send()

# Send the validation results via email
email_subject = "Validation Results"
send_email(email_subject, validation_results)
