import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, JavascriptException

# Initialize Edge WebDriver
driver = webdriver.Edge()  # This will use the Edge WebDriver in your PATH

# Function to check if a tab opens properly
def check_tab(tab_element, tab_name, content_locator):
    try:
        time.sleep(3)  # Wait for 3 seconds before clicking the tab
        tab_element.click()
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located(content_locator)
        )
        print(f"Tab '{tab_name}' opened successfully.")
        return True
    except TimeoutException:
        print(f"Failed to open tab '{tab_name}'.")
        return False

# Function to check if a sub-tab opens properly by executing JavaScript
def check_sub_tab(sub_tab_js, sub_tab_name, content_locator):
    try:
        time.sleep(3)  # Wait for 3 seconds before clicking the sub-tab
        print(f"Executing JavaScript for sub-tab '{sub_tab_name}': {sub_tab_js}")
        driver.execute_script(sub_tab_js)  # Execute JavaScript function directly
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located(content_locator)
        )
        print(f"Sub-tab '{sub_tab_name}' opened successfully.")
        return True
    except TimeoutException:
        print(f"Failed to open sub-tab '{sub_tab_name}'.")
        return False
    except JavascriptException as e:
        print(f"JavaScript error on sub-tab '{sub_tab_name}': {e}")
        # Adding more details for debugging
        print(driver.execute_script("return window.onerror"))
        return False

# Function to validate the first list element under "Name" column and click the cancel button
def validate_first_list_element_and_cancel():
    try:
        # Wait for the table to be visible
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "table.ListView"))
        )
        # Find the first element in the "Name" column
        first_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//table[@class='ListView']/tbody/tr[2]/td[2]/a"))
        )
        first_element.click()
        # Validate that the element opens properly
        WebDriverWait(driver, 10).until(
            EC.visibility_of_element_located((By.CSS_SELECTOR, "div#content"))  # Adjust the selector as needed
        )
        print("First list element opened successfully.")
        
        # Wait for 3 seconds before clicking the cancel button
        time.sleep(3)
        
        # Find and click the cancel button
        cancel_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "//img[@src='/fpa/images/btn_cancel.gif']"))
        )
        cancel_button.click()
        print("Cancel button clicked successfully.")
        
        return True
    except (TimeoutException, NoSuchElementException) as e:
        print(f"Failed to open the first list element or click the cancel button. Exception: {e}")
        return False

# Navigate to the webpage containing the tabs
driver.get('https://itintranet1.keybank.com/fpa/Login')  # Replace with your actual URL
print(f"Opened URL: {driver.current_url}")

# Main tab elements and their corresponding content locators
main_tabs = {
    "Users": ("/fpa/Usr", (By.CSS_SELECTOR, "table.ListView")),
    "User Roles": ("/fpa/UsrRoles", (By.CSS_SELECTOR, "table.ListView")),
    "Accounts": ("/fpa/Acct", (By.CSS_SELECTOR, "table.ListView")),
    "GL/CC's": ("/fpa/GlCstCntr", (By.CSS_SELECTOR, "table.ListView")),
    "Printers": ("/fpa/Printer", (By.CSS_SELECTOR, "table.ListView")),
    "Misc. Lookups": ("/fpa/AdminMiscLookup", (By.CSS_SELECTOR, "table.ListView")),
    "Check Mgmt.": ("/fpa/CheckManagement", (By.CSS_SELECTOR, "table.ListView")),
    "Archive": ("/fpa/Archive", (By.CSS_SELECTOR, "table.ListView")),
}

# Sub-tabs for different main tabs and their corresponding content locators
sub_tabs_map = {
    "Users": {
        "Active": ("showList('Active', 'Usr');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Usr');", (By.ID, "content")),
        "All": ("showListNew('All', 'Usr');", (By.ID, "content")),
    },
    "User Roles": {
        "Active": ("showList('Active', 'UsrRoles');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'UsrRoles');", (By.ID, "content")),
        "All": ("showListNew('All', 'UsrRoles');", (By.ID, "content")),
    },
    "Accounts": {
        "Active": ("showList('Active', 'Acct');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Acct');", (By.ID, "content")),
        "All": ("showListNew('All', 'Acct');", (By.ID, "content")),
    },
    "GL/CC's": {
        "Active": ("showList('Active', 'GlCstCntr');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'GlCstCntr');", (By.ID, "content")),
        "All": ("showListNew('All', 'GlCstCntr');", (By.ID, "content")),
    },
    "Printers": {
        "Active": ("showList('Active', 'Printer');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'Printer');", (By.ID, "content")),
        "All": ("showListNew('All', 'Printer');", (By.ID, "content")),
    },
    "Misc. Lookups": {
        "Active": ("showList('Active', 'AdminMiscLookup');", (By.ID, "content")),
        "Not Active": ("showListNew('InActive', 'AdminMiscLookup');", (By.ID, "content")),
        "All": ("showListNew('All', 'AdminMiscLookup');", (By.ID, "content")),
    },
    "Check Mgmt.": {
        "Active": ("showList('Active', 'CheckManagement');", (By.ID, "content")),
        "History": ("showList('History', 'CheckManagement');", (By.ID, "content")),
        "Search": ("showList('Search', 'CheckManagement');", (By.ID, "content")),
    },
}

all_tabs_opened = True

# Function to handle sub-tabs based on main tab
def handle_sub_tabs(tab_name, sub_tabs):
    global all_tabs_opened
    for sub_tab_name, (sub_tab_js, sub_content_locator) in sub_tabs.items():
        sub_success = check_sub_tab(sub_tab_js, sub_tab_name, sub_content_locator)
        if not sub_success:
            all_tabs_opened = False
        if sub_success:
            # Validate the first list element under each sub-tab and click the cancel button
            first_list_element_success = validate_first_list_element_and_cancel()
            if not first_list_element_success:
                all_tabs_opened = False

# Check main tabs and their respective sub-tabs
for tab_name, (tab_href, content_locator) in main_tabs.items():
    try:
        # Find the main tab element using its href attribute
        print(f"Attempting to click main tab: {tab_name}")
        tab_element = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, f"//a[@href='{tab_href}']"))
        )
        success = check_tab(tab_element, tab_name, content_locator)
        if not success:
            all_tabs_opened = False
        else:
            # Handle sub-tabs for each main tab
            if tab_name in sub_tabs_map:
                handle_sub_tabs(tab_name, sub_tabs_map[tab_name])

    except (TimeoutException, NoSuchElementException) as e:
        print(f"Tab '{tab_name}' not found or not clickable. Exception: {e}")
        all_tabs_opened = False

# Wait for 3 seconds before closing the browser
time.sleep(3)
# Close the browser
driver.quit()

# Print completion message if all tabs opened successfully
if all_tabs_opened:
    print("Validation completed.")
else:
    print("Validation failed.")
